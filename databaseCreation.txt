DROP DATABASE IF EXISTS fireDept;
CREATE DATABASE fireDept;
USE fireDept;
SET SQL_SAFE_UPDATES = 0;
CREATE TABLE user
(
 pass varchar(20),
 firefighterId int NOT NULL,
 username varchar(50) NOT NULL primary key
);

CREATE TABLE firefighter
(
 firstName varchar(30) NOT NULL,
 lastName varchar(30) NOT NULL,
 email varchar(50),
 phone BIGINT,
 secondaryPhone BIGINT,
 phoneProvider varchar(30),
 firefighterId  int AUTO_INCREMENT NOT NULL primary key
);

CREATE TABLE timeslot(
 timeslotId int AUTO_INCREMENT NOT NULL PRIMARY KEY,
 startTime DateTime NOT NULL,
 endTime DateTime NOT NULL
);

CREATE TABLE scheduleTimeslot
(
 scheduleTimeslotId int AUTO_INCREMENT NOT NULL PRIMARY KEY,
 timeslotId int NOT NULL,
 firefighterId int NOT NULL
);

CREATE TABLE availableTimeslot
(
 avaliableTimeslotId INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
 timeslotId int NOT NULL,
 firefighterId int NOT NULL
);

CREATE TABLE myEvent
(
 eventName varchar(30) NOT NULL,
 eventDescription varchar(300),
 timeslotId int NOT NULL,
 eventId int AUTO_INCREMENT NOT NULL PRIMARY KEY
);
CREATE TABLE assignedFirefighter(
 eventId int NOT NULL,
 apparatusId int NOT NULL,
 assignedFirefighterID int AUTO_INCREMENT NOT NULL PRIMARY KEY,
 firefighterId int NOT NULL
);

CREATE TABLE assignedApparatus
(
 assignedApparatusId int AUTO_INCREMENT NOT NULL PRIMARY KEY,
 eventId int NOT NULL,
 apparatusId int NOT NULL
);

CREATE TABLE apparatus(
 apparatusName varchar(30) NOT NULL,
 apparatusDescription varchar(100),
 numberOfSlots int NOT NULL,
 apparatusId int AUTO_INCREMENT NOT NULL PRIMARY KEY
);

DELIMITER //
CREATE PROCEDURE firefighter_insert (IN firefighter_first_name varchar(30),firefighter_last_name varchar(30), firefighter_email varchar(50), firefighter_phone BIGINT, firefighter_secondary_phone BIGINT, firefighter_phone_provider varchar(30))
BEGIN
INSERT INTO firefighter(firstName, lastName, email, phone, secondaryPhone, phoneProvider, firefighterId) VALUES (firefighter_first_name, firefighter_last_name,firefighter_email, firefighter_phone, firefighter_secondary_phone, firefighter_phone_provider, NULL);
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE schedule_timeslot_insert(IN schedule_timeslot_start_time DATETIME, schedule_timeslot_end_time DATETIME, schedule_timeslot_firefighter_id INT)
BEGIN
INSERT INTO timeslot(startTime, endTime, timeslotId) VALUES (schedule_timeslot_start_time, schedule_timeslot_end_time, NULL);
INSERT INTO scheduleTimeslot(timeslotId, firefighterId) VALUES (LAST_INSERT_ID(), schedule_timeslot_firefighter_id);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE available_timeslot_insert(IN available_timeslot_start_time DATETIME, available_timeslot_end_time DATETIME, available_timeslot_firefighter_id INT)
BEGIN
INSERT INTO timeslot(startTime, endTime, timeslotId) VALUES(available_timeslot_start_time, available_timeslot_end_time, NULL);
INSERT INTO availableTimeslot(timeslotId, firefighterId) VALUES (LAST_INSERT_ID(), available_timeslot_firefighter_id);
END //
DELIMITER;

DELIMITER //
CREATE PROCEDURE apparatus_insert (IN apparatus_name varchar(30), apparatus_description varchar(100), number_of_slots int)
BEGIN
INSERT INTO apparatus(apparatusName, apparatusDescription, numberOfSlots, apparatusId) VALUES (apparatus_name, apparatus_description, number_of_slots, NULL);
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE assigned_apparatus_insert (IN event_id int, apparatus_id int)
BEGIN
INSERT INTO assignedApparatus(eventId, apparatusId, assignedApparatusId) VALUES (event_id, apparatus_id, NULL);
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE assigned_firefighter_insert (IN event_id int, apparatus_id int, firefighter_id int)
BEGIN
INSERT INTO assignedFirefighter(eventId, apparatusId, firefighterId, assignedFirefighterID) VALUES (event_id, apparatus_id, firefighter_id, NULL);
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE my_event_insert (IN event_name varchar(30), event_description varchar(300), start_time DATETIME, end_time DATETIME)
BEGIN
INSERT INTO timeslot(startTime, endTime, timeslotId) VALUES(start_time, end_time, NULL);
INSERT INTO myEvent(eventName, eventDescription, timeslotId, eventId) VALUES (event_name, event_description, LAST_INSERT_ID(), NULL);
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE assigned_apparatus_remove (IN assigned_apparatus_id int)
BEGIN
DELETE FROM assignedApparatus WHERE assignedApparatusId = assigned_apparatus_id;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE assigned_firefighter_remove (IN assigned_firefighter_id int)
BEGIN
DELETE FROM assignedFirefighter WHERE assignedFirefighterId = assigned_firefighter_id;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE my_event_remove (IN event_id int)
BEGIN
DELETE ts FROM Timeslot ts INNER JOIN MyEvent me ON ts.timeslotId = me.timeslotId;
DELETE FROM assignedFirefighter WHERE eventId = event_id;
DELETE FROM assignedApparatus WHERE eventId = event_id;
DELETE FROM myEvent WHERE eventId = event_Id;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE schedule_timeslot_remove(IN schedule_timeslot_id INT)
BEGIN
DELETE ts FROM Timeslot ts INNER JOIN ScheduleTimeslot ss ON ts.timeslotId = ss.timeslotId;
DELETE FROM scheduleTimeslot WHERE scheduleTimeslotId = schedule_timeslot_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE available_timeslot_remove(IN available_timeslot_id INT)
BEGIN
DELETE ts FROM Timeslot ts INNER JOIN AvailableTimeslot avs ON ts.timeslotId = avs.timeslotId;
DELETE FROM availableTimeslot  WHERE availabletimeslotId = available_timeslot_id;
END //
DELIMITER;

DELIMITER //
CREATE PROCEDURE apparatus_remove (IN apparatus_id INT)
BEGIN
DELETE assigned FROM assignedApparatus assigned INNER JOIN Apparatus ap ON ap.apparatusId = assigned.apparatusId;
DELETE FROM apparatus WHERE apparatusId = apparatus_id;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE firefighter_remove (IN firefighter_id int)
BEGIN
DELETE ts FROM Timeslot ts INNER JOIN AvailableTimeslot avs ON ts.timeslotId = avs.timeslotId AND avs.firefighterId=firefighter_id;
DELETE FROM availableTimeslot  WHERE firefighterId = firefighter_id;
DELETE ts FROM Timeslot ts INNER JOIN ScheduleTimeslot ss ON ts.timeslotId = ss.timeslotId AND ss.firefighterId=firefighter_id;
DELETE FROM availableTimeslot  WHERE firefighterId = firefighter_id;
DELETE FROM assignedFirefighter WHERE firefighterId=firefighter_id;
DELETE FROM firefighter WHERE firefighterId=firefighter_id;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE user_remove (IN username_to_remove varchar(30))
BEGIN
DECLARE firefighter_id INT;
INSERT INTO firefighter_id SELECT firefighterId FROM User WHERE username = username_to_remove;
CALL firefighter_remove(firefighter_id);
DELETE FROM user WHERE username = username_to_remove;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_firefighters()
BEGIN
SELECT * FROM firefighter;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_available_timeslots()
BEGIN
SELECT * FROM availableTimeslot JOIN (firefighter, timeslot) ON (firefighter.firefighterId=availableTimeslot.firefighterId AND timeslot.timeslotId = availableTimeslot.timeslotId);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_schedule_timeslots()
BEGIN
SELECT * FROM scheduleTimeslot JOIN (firefighter, timeslot) ON (firefighter.firefighterId = scheduleTimeslot.firefighterId AND timeslot.timeslotId = scheduleTimeslot.timeslotId);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_apparatus()
BEGIN
SELECT * FROM Apparatus;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_users()
BEGIN
SELECT * FROM user JOIN firefighter ON (firefighter.firefighterId = user.firefighterId);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_events()
BEGIN
SELECT * FROM myEvent JOIN (timeslot) ON (myEvent.timeslotId = timeslot.timeslotId);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_assigned_apparatus()
BEGIN
SELECT * FROM assignedApparatus JOIN (myEvent, apparatus) ON (myEvent.eventId = assignedApparatus.eventId AND apparatus.apparatusId=assignedApparatus.apparatusId);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_assigned_firefighters()
BEGIN
SELECT * FROM assignedFirefighter JOIN (myEvent, firefighter) ON (myEvent.eventId = assignedFirefighter.eventId AND firefighter.firefighterId = assignedFirefighter.firefighterId);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_available_timeslots_between(border_start_date DATETIME, border_end_date DATETIME)
BEGIN
SELECT * FROM AVAILABLETIMESLOT JOIN(firefighter, timeslot) ON (firefighter.firefighterId = availabletimeslot.firefighterId AND timeslot.timeslotId = availabletimeslot.timeslotId AND timeslot.startTime<=border_end_date and timeslot.endTime>=border_start_date);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_all_schedule_timeslots_between(border_start_date DATETIME, border_end_date DATETIME)
BEGIN
SELECT * FROM SCHEDULETIMESLOT JOIN (firefighter, timeslot) ON (firefighter.firefighterId = scheduleTimeslot.firefighterId AND timeslot.timeslotId = scheduleTimeslot.timeslotId AND timeslot.startTime<=border_end_date and timeslot.endTime>=border_start_date);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_firefighter_with_id(firefighter_id INT)
BEGIN
SELECT * FROM firefighter WHERE (firefighterId = firefighter_id);
END //
DELIMITER ;

SELECT * FROM timeslot;
SELECT * FROM AVAILABLETIMESLOT;
SELECT * FROM SCHEDULETIMESLOT;

CALL my_event_insert("Party", "Fun!", "2016-4-23 11:00:00", "2016-4-23 12:00:00");
CALL my_event_insert("Cake", "Fun!", "2016-4-23 11:00:00", "2016-4-23 12:00:00");
CALL apparatus_insert("Big Truck", "It's HUGE!", 12);
CALL apparatus_insert("Ladder Truck", "Really large ladder", 6);
CALL apparatus_insert("Small Truck", "It's tiny!", 3);

CALL firefighter_insert("Kelly", "Blair", NULL, NULL, NULL, "att");
CALL firefighter_insert("Ash", "Ketchum", "pikachu100@pokeball.com", NULL, NULL, NULL);
CALL firefighter_insert("Misty", "Bubbles", "misty32453453@staryu.com", NULL, NULL, NULL);
CALL firefighter_insert("Brock", "Rock", "brockkk@onyx.com", NULL, NULL, NULL);
CALL firefighter_insert("May", "Ki", "torchic@blaziken.com", NULL, NULL, NULL);
SELECT * FROM firefighter;

Call schedule_timeslot_insert("2016-4-23 11:00:00", "2016-4-23 12:00:00", 1);
Call schedule_timeslot_insert("2016-4-24 04:00:00", "2016-4-24 10:00:00", 2);
Call schedule_timeslot_insert("2016-4-24 12:00:00", "2016-4-24 18:00:00", 3);
Call schedule_timeslot_insert("2016-4-24 02:00:00", "2016-4-24 13:00:00", 2);
Call schedule_timeslot_insert("2016-4-25 15:00:00", "2016-4-25 23:00:00", 4);
Call schedule_timeslot_insert("2016-4-25 18:00:00", "2016-4-25 20:00:00", 2);
Call schedule_timeslot_insert("2016-4-25 01:00:00", "2016-4-25 10:00:00", 1);
Call schedule_timeslot_insert("2016-4-25 22:00:00", "2016-4-26 02:00:00", 2);
Call schedule_timeslot_insert("2016-4-26 04:00:00", "2016-4-26 12:00:00", 3);
Call schedule_timeslot_insert("2016-4-26 09:00:00", "2016-4-26 13:00:00", 4);
Call schedule_timeslot_insert("2016-4-26 10:00:00", "2016-4-26 23:00:00", 1);
Call schedule_timeslot_insert("2016-4-28 11:00:00", "2016-4-28 12:15:00", 3);
Call schedule_timeslot_insert("2016-4-28 03:00:00", "2016-4-28 13:00:00", 4);

Call available_timeslot_insert("2016-4-24 11:00:00", "2016-4-24 12:00:00", 3);
Call assigned_apparatus_insert(1, 1);
Call assigned_apparatus_insert(1, 3);
Call assigned_firefighter_insert(1, 1, 1);
Call assigned_apparatus_remove(1);
Call assigned_firefighter_remove(1);
Call firefighter_remove(1);
Call apparatus_remove(2);
Call my_event_remove(2);
Call get_all_firefighters;
Call get_all_available_timeslots;
Call get_all_schedule_timeslots;
Call get_all_available_timeslots_between("2014-4-24 11:00:00", "2018-4-24 11:00:00");
Call get_all_schedule_timeslots_between("2014-4-24 11:00:00", "2016-4-24 11:00:00");
Call get_firefighter_with_id(1);
CALL get_all_apparatus();
CALL get_all_users();
CALL get_all_events();
CALL get_all_assigned_apparatus();
CALL get_all_assigned_firefighters();